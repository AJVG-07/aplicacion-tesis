const { pool } = require('../config/database');

async function completeDatabaseSetup() {
  console.log('üîß Configurando base de datos completa...');
  
  try {
    // Crear todas las tablas necesarias
    await createTables();
    await loadCategories();
    await loadUnits();
    await loadCalculationTypes();
    await loadIndicators();
    await createUserIfNotExists();
    
    console.log('üéâ Base de datos configurada completamente!');
    
  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n:', error);
    throw error;
  }
}

async function createTables() {
  console.log('üìã Creando/verificando tablas...');
  
  // Tabla de categor√≠as
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS categorias (
      id INT AUTO_INCREMENT PRIMARY KEY,
      nombre VARCHAR(100) NOT NULL UNIQUE,
      descripcion TEXT,
      color VARCHAR(7) DEFAULT '#6B7280',
      icono VARCHAR(20) DEFAULT 'üìä',
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  // Tabla de unidades
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS unidades (
      id INT AUTO_INCREMENT PRIMARY KEY,
      nombre VARCHAR(50) NOT NULL UNIQUE,
      simbolo VARCHAR(20) NOT NULL,
      descripcion TEXT,
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  // Tabla de tipos de c√°lculo
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS tipos_calculo (
      id INT AUTO_INCREMENT PRIMARY KEY,
      nombre VARCHAR(50) NOT NULL UNIQUE,
      descripcion TEXT,
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  // Tabla de indicadores (actualizar estructura)
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS indicadores (
      id INT AUTO_INCREMENT PRIMARY KEY,
      nombre VARCHAR(255) NOT NULL,
      descripcion TEXT,
      categoria_id INT NOT NULL,
      unidad_id INT NOT NULL,
      tipo_calculo_id INT NOT NULL,
      formula TEXT,
      estado ENUM('activo', 'inactivo') DEFAULT 'activo',
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (categoria_id) REFERENCES categorias(id),
      FOREIGN KEY (unidad_id) REFERENCES unidades(id),
      FOREIGN KEY (tipo_calculo_id) REFERENCES tipos_calculo(id)
    )
  `);
  
  // Tabla de metas ambientales
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS metas_ambientales (
      id INT AUTO_INCREMENT PRIMARY KEY,
      indicador_id INT NOT NULL,
      titulo VARCHAR(255) NOT NULL,
      descripcion TEXT,
      objetivo_numerico DECIMAL(15,4) NOT NULL,
      fecha_limite DATE NOT NULL,
      estado ENUM('en_progreso', 'cumplida', 'atrasada', 'cancelada') DEFAULT 'en_progreso',
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      FOREIGN KEY (indicador_id) REFERENCES indicadores(id) ON DELETE CASCADE
    )
  `);
  
  // Tabla de registros de datos
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS registros (
      id INT AUTO_INCREMENT PRIMARY KEY,
      indicador_id INT NOT NULL,
      usuario_id INT NOT NULL,
      valor DECIMAL(15,4) NOT NULL,
      mes INT NOT NULL,
      ano INT NOT NULL,
      estado ENUM('pendiente', 'cargado', 'cargado_con_ceros') DEFAULT 'cargado',
      observaciones TEXT,
      fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      UNIQUE KEY unique_indicator_month_year (indicador_id, mes, ano),
      FOREIGN KEY (indicador_id) REFERENCES indicadores(id) ON DELETE CASCADE,
      FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
    )
  `);
  
  // Tabla de alertas
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS alertas (
      id INT AUTO_INCREMENT PRIMARY KEY,
      tipo ENUM('valor_atipico', 'meta_atrasada', 'carga_pendiente', 'sistema') NOT NULL,
      titulo VARCHAR(255) NOT NULL,
      descripcion TEXT,
      indicador_id INT NULL,
      usuario_id INT NULL,
      estado ENUM('nueva', 'leida', 'resuelta') DEFAULT 'nueva',
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      fecha_leida TIMESTAMP NULL,
      FOREIGN KEY (indicador_id) REFERENCES indicadores(id) ON DELETE CASCADE,
      FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
    )
  `);
  
  // Tabla de configuraci√≥n del sistema
  await pool.execute(`
    CREATE TABLE IF NOT EXISTS configuracion_sistema (
      id INT AUTO_INCREMENT PRIMARY KEY,
      clave VARCHAR(100) NOT NULL UNIQUE,
      valor TEXT NOT NULL,
      descripcion TEXT,
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )
  `);
  
  console.log('‚úÖ Todas las tablas creadas/verificadas');
}

async function loadCategories() {
  console.log('üè∑Ô∏è  Cargando categor√≠as...');
  
  const categories = [
    { nombre: 'Residuos', descripcion: 'Gesti√≥n y generaci√≥n de residuos', color: '#10B981', icono: 'üåé' },
    { nombre: 'Agua', descripcion: 'Consumo y gesti√≥n del agua', color: '#3B82F6', icono: 'üíß' },
    { nombre: 'Energ√≠a', descripcion: 'Consumo energ√©tico y eficiencia', color: '#F59E0B', icono: '‚ö°Ô∏è' },
    { nombre: 'Aire y Emisiones', descripcion: 'Calidad del aire y emisiones GEI', color: '#8B5CF6', icono: 'üí®' },
    { nombre: 'Biodiversidad y Espacios Verdes', descripcion: 'Flora, fauna y √°reas verdes', color: '#059669', icono: 'üå≥' },
    { nombre: 'Gesti√≥n y Educaci√≥n Ambiental', descripcion: 'Programas educativos y gesti√≥n', color: '#DC2626', icono: 'üè¢' }
  ];
  
  for (const cat of categories) {
    await pool.execute(`
      INSERT IGNORE INTO categorias (nombre, descripcion, color, icono) 
      VALUES (?, ?, ?, ?)
    `, [cat.nombre, cat.descripcion, cat.color, cat.icono]);
  }
  
  console.log('‚úÖ Categor√≠as cargadas');
}

async function loadUnits() {
  console.log('üìè Cargando unidades...');
  
  const units = [
    { nombre: 'Kilogramos', simbolo: 'kg' },
    { nombre: 'Kilogramos por persona', simbolo: 'kg/persona' },
    { nombre: 'Kilogramos por metro cuadrado', simbolo: 'kg/m¬≤' },
    { nombre: 'Porcentaje', simbolo: '%' },
    { nombre: 'Litros', simbolo: 'L' },
    { nombre: 'Litros por persona', simbolo: 'L/persona' },
    { nombre: 'Litros por metro cuadrado', simbolo: 'L/m¬≤' },
    { nombre: 'Kilovatios-hora', simbolo: 'kWh' },
    { nombre: 'Kilovatios-hora por persona', simbolo: 'kWh/persona' },
    { nombre: 'Kilovatios-hora por metro cuadrado', simbolo: 'kWh/m¬≤' },
    { nombre: 'Metros c√∫bicos', simbolo: 'm¬≥' },
    { nombre: 'Toneladas de CO‚ÇÇ equivalente', simbolo: 'tCO‚ÇÇeq' },
    { nombre: 'Kilogramos de CO‚ÇÇ equivalente por persona', simbolo: 'kgCO‚ÇÇeq/persona' },
    { nombre: 'Metros cuadrados', simbolo: 'm¬≤' },
    { nombre: 'Metros cuadrados por persona', simbolo: 'm¬≤/persona' },
    { nombre: 'Unidades', simbolo: 'unidades' },
    { nombre: 'D√≥lares', simbolo: '$' }
  ];
  
  for (const unit of units) {
    await pool.execute(`
      INSERT IGNORE INTO unidades (nombre, simbolo) 
      VALUES (?, ?)
    `, [unit.nombre, unit.simbolo]);
  }
  
  console.log('‚úÖ Unidades cargadas');
}

async function loadCalculationTypes() {
  console.log('üî¢ Cargando tipos de c√°lculo...');
  
  const types = [
    { nombre: 'directo', descripcion: 'Valor directo sin c√°lculo adicional' },
    { nombre: 'calculado', descripcion: 'Valor calculado mediante f√≥rmula' },
    { nombre: 'porcentaje', descripcion: 'Valor en porcentaje' },
    { nombre: 'ratio', descripcion: 'Relaci√≥n entre dos valores' }
  ];
  
  for (const type of types) {
    await pool.execute(`
      INSERT IGNORE INTO tipos_calculo (nombre, descripcion) 
      VALUES (?, ?)
    `, [type.nombre, type.descripcion]);
  }
  
  console.log('‚úÖ Tipos de c√°lculo cargados');
}

async function loadIndicators() {
  console.log('üìä Cargando indicadores ambientales...');
  
  const indicators = [
    // RESIDUOS
    { nombre: 'Generaci√≥n total de residuos', descripcion: 'Peso total de los residuos generados en un per√≠odo', categoria: 'Residuos', unidad: 'kg', tipo: 'directo', formula: null },
    { nombre: 'Generaci√≥n de residuos por persona', descripcion: 'Peso de los residuos generados por cada individuo', categoria: 'Residuos', unidad: 'kg/persona', tipo: 'calculado', formula: 'Generaci√≥n total de residuos / N√∫mero de personas' },
    { nombre: 'Generaci√≥n de residuos por metro cuadrado', descripcion: 'Peso de los residuos por el √°rea de la instituci√≥n', categoria: 'Residuos', unidad: 'kg/m¬≤', tipo: 'calculado', formula: 'Generaci√≥n total de residuos / √Årea total (m¬≤)' },
    { nombre: 'Porcentaje de reciclaje', descripcion: 'Proporci√≥n de residuos que se separan para reciclaje', categoria: 'Residuos', unidad: '%', tipo: 'porcentaje', formula: '(Residuos reciclados / Generaci√≥n total de residuos) √ó 100' },
    { nombre: 'Peso de residuos electr√≥nicos desechados', descripcion: 'Peso de computadoras, impresoras, monitores y otros equipos electr√≥nicos', categoria: 'Residuos', unidad: 'kg', tipo: 'directo', formula: null },
    { nombre: 'Porcentaje de compostaje de residuos org√°nicos', descripcion: 'Proporci√≥n de materia org√°nica que se desv√≠a a compostaje', categoria: 'Residuos', unidad: '%', tipo: 'porcentaje', formula: '(Residuos org√°nicos compostados / Total de residuos org√°nicos) √ó 100' },
    
    // AGUA
    { nombre: 'Consumo total de agua', descripcion: 'Volumen total de agua utilizada por la instituci√≥n', categoria: 'Agua', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'Consumo de agua por persona', descripcion: 'Volumen de agua que consume cada individuo', categoria: 'Agua', unidad: 'L/persona', tipo: 'calculado', formula: 'Consumo total de agua / N√∫mero de personas' },
    { nombre: 'Consumo de agua por metro cuadrado', descripcion: 'Volumen de agua por √°rea construida o del campus', categoria: 'Agua', unidad: 'L/m¬≤', tipo: 'calculado', formula: 'Consumo total de agua / √Årea total (m¬≤)' },
    { nombre: 'Volumen de agua de lluvia recolectada', descripcion: 'Cantidad de agua pluvial que se capta para su reutilizaci√≥n', categoria: 'Agua', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'Agua reutilizada o tratada', descripcion: 'Volumen de agua que se recicla para usos como riego o limpieza', categoria: 'Agua', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'N√∫mero de fugas de agua detectadas y reparadas', descripcion: 'Medida de la eficiencia del mantenimiento de la red de agua', categoria: 'Agua', unidad: 'unidades', tipo: 'directo', formula: null },
    
    // ENERG√çA
    { nombre: 'Consumo total de energ√≠a el√©ctrica', descripcion: 'Energ√≠a el√©ctrica total consumida', categoria: 'Energ√≠a', unidad: 'kWh', tipo: 'directo', formula: null },
    { nombre: 'Consumo de energ√≠a por persona', descripcion: 'Energ√≠a consumida por cada individuo', categoria: 'Energ√≠a', unidad: 'kWh/persona', tipo: 'calculado', formula: 'Consumo total de energ√≠a / N√∫mero de personas' },
    { nombre: 'Consumo de energ√≠a por metro cuadrado', descripcion: 'Energ√≠a consumida por la superficie total de la instituci√≥n', categoria: 'Energ√≠a', unidad: 'kWh/m¬≤', tipo: 'calculado', formula: 'Consumo total de energ√≠a / √Årea total (m¬≤)' },
    { nombre: 'Consumo de gas natural o GLP', descripcion: 'Volumen de gas utilizado para calefacci√≥n o cocinas', categoria: 'Energ√≠a', unidad: 'm¬≥', tipo: 'directo', formula: null },
    { nombre: 'Porcentaje de energ√≠a renovable', descripcion: 'Proporci√≥n de la energ√≠a que proviene de fuentes limpias', categoria: 'Energ√≠a', unidad: '%', tipo: 'porcentaje', formula: '(Energ√≠a renovable / Consumo total de energ√≠a) √ó 100' },
    { nombre: 'Ahorro de energ√≠a en periodos no lectivos', descripcion: 'Medida de la reducci√≥n del consumo durante vacaciones', categoria: 'Energ√≠a', unidad: '%', tipo: 'porcentaje', formula: '((Consumo periodo lectivo - Consumo periodo no lectivo) / Consumo periodo lectivo) √ó 100' },
    
    // AIRE Y EMISIONES
    { nombre: 'Emisiones de gases de efecto invernadero (GEI)', descripcion: 'Cantidad total de gases de efecto invernadero emitidos', categoria: 'Aire y Emisiones', unidad: 'tCO‚ÇÇeq', tipo: 'directo', formula: null },
    { nombre: 'Emisiones de GEI por persona', descripcion: 'Huella de carbono per c√°pita de la comunidad educativa', categoria: 'Aire y Emisiones', unidad: 'kgCO‚ÇÇeq/persona', tipo: 'calculado', formula: 'Emisiones totales de GEI / N√∫mero de personas' },
    { nombre: 'Consumo de combustible por la flota de veh√≠culos', descripcion: 'Volumen de combustible utilizado por los veh√≠culos de la instituci√≥n', categoria: 'Aire y Emisiones', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'N√∫mero de viajes en transporte sostenible', descripcion: 'Conteo de viajes realizados en autob√∫s, bicicleta o a pie', categoria: 'Aire y Emisiones', unidad: 'unidades', tipo: 'directo', formula: null },
    
    // BIODIVERSIDAD
    { nombre: '√Årea de zonas verdes', descripcion: 'Superficie total de jardines, campos deportivos y √°reas naturales', categoria: 'Biodiversidad y Espacios Verdes', unidad: 'm¬≤', tipo: 'directo', formula: null },
    { nombre: '√Årea de zonas verdes por persona', descripcion: 'Espacio verde disponible para cada individuo', categoria: 'Biodiversidad y Espacios Verdes', unidad: 'm¬≤/persona', tipo: 'calculado', formula: '√Årea total de zonas verdes / N√∫mero de personas' },
    { nombre: 'N√∫mero de especies de flora nativa', descripcion: 'Conteo de las plantas end√©micas de la regi√≥n presentes', categoria: 'Biodiversidad y Espacios Verdes', unidad: 'unidades', tipo: 'directo', formula: null },
    
    // GESTI√ìN Y EDUCACI√ìN
    { nombre: 'Gasto en materiales sostenibles', descripcion: 'Inversi√≥n en productos con certificaciones ecol√≥gicas', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: '$', tipo: 'directo', formula: null },
    { nombre: 'N√∫mero de iniciativas ambientales', descripcion: 'Conteo de proyectos, programas o campa√±as de sostenibilidad', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: 'unidades', tipo: 'directo', formula: null },
    { nombre: 'Porcentaje de estudiantes/personal que han recibido formaci√≥n ambiental', descripcion: 'Proporci√≥n de la comunidad que ha participado en talleres', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: '%', tipo: 'porcentaje', formula: '(Personas con formaci√≥n ambiental / Total de personas) √ó 100' },
    { nombre: 'N√∫mero de asignaturas con enfoque ambiental', descripcion: 'Conteo de los cursos que abordan la sostenibilidad', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: 'unidades', tipo: 'directo', formula: null }
  ];
  
  // Limpiar indicadores existentes
  await pool.execute("DELETE FROM indicadores");
  
  for (const indicator of indicators) {
    const [categoria] = await pool.execute("SELECT id FROM categorias WHERE nombre = ?", [indicator.categoria]);
    const [unidad] = await pool.execute("SELECT id FROM unidades WHERE simbolo = ?", [indicator.unidad]);
    const [tipo] = await pool.execute("SELECT id FROM tipos_calculo WHERE nombre = ?", [indicator.tipo]);
    
    if (categoria.length > 0 && unidad.length > 0 && tipo.length > 0) {
      await pool.execute(
        "INSERT INTO indicadores (nombre, descripcion, categoria_id, unidad_id, tipo_calculo_id, formula) VALUES (?, ?, ?, ?, ?, ?)",
        [indicator.nombre, indicator.descripcion, categoria[0].id, unidad[0].id, tipo[0].id, indicator.formula]
      );
    }
  }
  
  console.log('‚úÖ Indicadores cargados');
}

async function createUserIfNotExists() {
  console.log('üë§ Verificando usuario administrador...');
  
  const [adminUsers] = await pool.execute("SELECT id FROM usuarios WHERE rol = 'administrador' LIMIT 1");
  
  if (adminUsers.length === 0) {
    const bcrypt = require('bcryptjs');
    const passwordHash = await bcrypt.hash('admin123', 10);
    
    await pool.execute(
      "INSERT INTO usuarios (nombre, apellido, email, contrasena_hash, rol) VALUES (?, ?, ?, ?, ?)",
      ['Admin', 'Sistema', 'admin@sistema.com', passwordHash, 'administrador']
    );
    
    console.log('‚úÖ Usuario administrador creado: admin@sistema.com / admin123');
  } else {
    console.log('‚úÖ Usuario administrador ya existe');
  }
}

// Ejecutar si el archivo se llama directamente
if (require.main === module) {
  completeDatabaseSetup()
    .then(() => {
      console.log('üèÅ Proceso completado exitosamente');
      console.log('\nüöÄ Ya puedes:');
      console.log('   1. Iniciar el backend: npm start');
      console.log('   2. Acceder como admin: admin@sistema.com / admin123');
      console.log('   3. Comenzar a cargar datos ambientales');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Error durante la configuraci√≥n:', error);
      process.exit(1);
    });
}

module.exports = { completeDatabaseSetup };