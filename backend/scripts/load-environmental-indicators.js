const { pool } = require('../config/database');

async function loadEnvironmentalIndicators() {
  console.log('üå± Cargando indicadores ambientales...');
  
  try {
    // Limpiar indicadores existentes (opcional, comentado por seguridad)
    // await pool.execute("DELETE FROM indicadores");
    
    const indicators = [
      // üåé RESIDUOS
      {
        nombre: 'Generaci√≥n total de residuos',
        descripcion: 'Peso total de los residuos generados en un per√≠odo',
        unidad: 'kg',
        categoria: 'Residuos',
        formula: null
      },
      {
        nombre: 'Generaci√≥n de residuos por persona',
        descripcion: 'Peso de los residuos generados por cada individuo (estudiante, docente o personal)',
        unidad: 'kg/persona',
        categoria: 'Residuos',
        formula: 'Generaci√≥n total de residuos / N√∫mero de personas'
      },
      {
        nombre: 'Generaci√≥n de residuos por metro cuadrado',
        descripcion: 'Peso de los residuos por el √°rea de la instituci√≥n',
        unidad: 'kg/m¬≤',
        categoria: 'Residuos',
        formula: 'Generaci√≥n total de residuos / √Årea total (m¬≤)'
      },
      {
        nombre: 'Porcentaje de reciclaje',
        descripcion: 'Proporci√≥n de residuos que se separan para reciclaje',
        unidad: '%',
        categoria: 'Residuos',
        formula: '(Residuos reciclados / Generaci√≥n total de residuos) √ó 100'
      },
      {
        nombre: 'Peso de residuos electr√≥nicos desechados',
        descripcion: 'Peso de computadoras, impresoras, monitores y otros equipos electr√≥nicos',
        unidad: 'kg',
        categoria: 'Residuos',
        formula: null
      },
      {
        nombre: 'Porcentaje de compostaje de residuos org√°nicos',
        descripcion: 'Proporci√≥n de materia org√°nica (restos de alimentos, jardiner√≠a) que se desv√≠a a compostaje',
        unidad: '%',
        categoria: 'Residuos',
        formula: '(Residuos org√°nicos compostados / Total de residuos org√°nicos) √ó 100'
      },
      
      // üíß AGUA
      {
        nombre: 'Consumo total de agua',
        descripcion: 'Volumen total de agua utilizada por la instituci√≥n',
        unidad: 'L',
        categoria: 'Agua',
        formula: null
      },
      {
        nombre: 'Consumo de agua por persona',
        descripcion: 'Volumen de agua que consume cada individuo',
        unidad: 'L/persona',
        categoria: 'Agua',
        formula: 'Consumo total de agua / N√∫mero de personas'
      },
      {
        nombre: 'Consumo de agua por metro cuadrado',
        descripcion: 'Volumen de agua por √°rea construida o del campus',
        unidad: 'L/m¬≤',
        categoria: 'Agua',
        formula: 'Consumo total de agua / √Årea total (m¬≤)'
      },
      {
        nombre: 'Volumen de agua de lluvia recolectada',
        descripcion: 'Cantidad de agua pluvial que se capta para su reutilizaci√≥n',
        unidad: 'L',
        categoria: 'Agua',
        formula: null
      },
      {
        nombre: 'Agua reutilizada o tratada',
        descripcion: 'Volumen de agua que se recicla para usos como riego o limpieza',
        unidad: 'L',
        categoria: 'Agua',
        formula: null
      },
      {
        nombre: 'N√∫mero de fugas de agua detectadas y reparadas',
        descripcion: 'Medida de la eficiencia del mantenimiento de la red de agua',
        unidad: 'unidades',
        categoria: 'Agua',
        formula: null
      },
      
      // ‚ö°Ô∏è ENERG√çA
      {
        nombre: 'Consumo total de energ√≠a el√©ctrica',
        descripcion: 'Energ√≠a el√©ctrica total consumida',
        unidad: 'kWh',
        categoria: 'Energ√≠a',
        formula: null
      },
      {
        nombre: 'Consumo de energ√≠a por persona',
        descripcion: 'Energ√≠a consumida por cada individuo',
        unidad: 'kWh/persona',
        categoria: 'Energ√≠a',
        formula: 'Consumo total de energ√≠a / N√∫mero de personas'
      },
      {
        nombre: 'Consumo de energ√≠a por metro cuadrado',
        descripcion: 'Energ√≠a consumida por la superficie total de la instituci√≥n',
        unidad: 'kWh/m¬≤',
        categoria: 'Energ√≠a',
        formula: 'Consumo total de energ√≠a / √Årea total (m¬≤)'
      },
      {
        nombre: 'Consumo de gas natural o GLP',
        descripcion: 'Volumen de gas utilizado para calefacci√≥n o cocinas',
        unidad: 'm¬≥',
        categoria: 'Energ√≠a',
        formula: null
      },
      {
        nombre: 'Porcentaje de energ√≠a renovable',
        descripcion: 'Proporci√≥n de la energ√≠a que proviene de fuentes limpias (ej. paneles solares)',
        unidad: '%',
        categoria: 'Energ√≠a',
        formula: '(Energ√≠a renovable / Consumo total de energ√≠a) √ó 100'
      },
      {
        nombre: 'Ahorro de energ√≠a en periodos no lectivos',
        descripcion: 'Medida de la reducci√≥n del consumo durante vacaciones o fines de semana',
        unidad: '%',
        categoria: 'Energ√≠a',
        formula: '((Consumo periodo lectivo - Consumo periodo no lectivo) / Consumo periodo lectivo) √ó 100'
      },
      
      // üí® AIRE Y EMISIONES
      {
        nombre: 'Emisiones de gases de efecto invernadero (GEI)',
        descripcion: 'Cantidad total de gases de efecto invernadero emitidos. Huella de carbono de la instituci√≥n',
        unidad: 'tCO‚ÇÇeq',
        categoria: 'Aire y Emisiones',
        formula: null
      },
      {
        nombre: 'Emisiones de GEI por persona',
        descripcion: 'Huella de carbono per c√°pita de la comunidad educativa',
        unidad: 'kgCO‚ÇÇeq/persona',
        categoria: 'Aire y Emisiones',
        formula: 'Emisiones totales de GEI / N√∫mero de personas'
      },
      {
        nombre: 'Consumo de combustible por la flota de veh√≠culos',
        descripcion: 'Volumen de combustible (gasolina, di√©sel) utilizado por los veh√≠culos de la instituci√≥n',
        unidad: 'L',
        categoria: 'Aire y Emisiones',
        formula: null
      },
      {
        nombre: 'N√∫mero de viajes en transporte sostenible',
        descripcion: 'Conteo de viajes realizados en autob√∫s, bicicleta o a pie, medido a trav√©s de encuestas',
        unidad: 'unidades',
        categoria: 'Aire y Emisiones',
        formula: null
      },
      
      // üå≥ BIODIVERSIDAD Y ESPACIOS VERDES
      {
        nombre: '√Årea de zonas verdes',
        descripcion: 'Superficie total de jardines, campos deportivos y √°reas naturales en el campus',
        unidad: 'm¬≤',
        categoria: 'Biodiversidad y Espacios Verdes',
        formula: null
      },
      {
        nombre: '√Årea de zonas verdes por persona',
        descripcion: 'Espacio verde disponible para cada individuo',
        unidad: 'm¬≤/persona',
        categoria: 'Biodiversidad y Espacios Verdes',
        formula: '√Årea total de zonas verdes / N√∫mero de personas'
      },
      {
        nombre: 'N√∫mero de especies de flora nativa',
        descripcion: 'Conteo de las plantas end√©micas de la regi√≥n presentes en el campus',
        unidad: 'unidades',
        categoria: 'Biodiversidad y Espacios Verdes',
        formula: null
      },
      
      // üè¢ GESTI√ìN Y EDUCACI√ìN AMBIENTAL
      {
        nombre: 'Gasto en materiales sostenibles',
        descripcion: 'Inversi√≥n monetaria en productos con certificaciones ecol√≥gicas o de bajo impacto ambiental',
        unidad: '$',
        categoria: 'Gesti√≥n y Educaci√≥n Ambiental',
        formula: null
      },
      {
        nombre: 'N√∫mero de iniciativas ambientales',
        descripcion: 'Conteo de proyectos, programas o campa√±as de sostenibilidad organizadas',
        unidad: 'unidades',
        categoria: 'Gesti√≥n y Educaci√≥n Ambiental',
        formula: null
      },
      {
        nombre: 'Porcentaje de estudiantes/personal que han recibido formaci√≥n ambiental',
        descripcion: 'Proporci√≥n de la comunidad que ha participado en talleres o cursos sobre sostenibilidad',
        unidad: '%',
        categoria: 'Gesti√≥n y Educaci√≥n Ambiental',
        formula: '(Personas con formaci√≥n ambiental / Total de personas) √ó 100'
      },
      {
        nombre: 'N√∫mero de asignaturas con enfoque ambiental',
        descripcion: 'Conteo de los cursos o materias en el plan de estudios que abordan la sostenibilidad',
        unidad: 'unidades',
        categoria: 'Gesti√≥n y Educaci√≥n Ambiental',
        formula: null
      }
    ];

    console.log(`üìä Insertando ${indicators.length} indicadores...`);
    
    // Verificar si ya existen indicadores
    const [existingCount] = await pool.execute("SELECT COUNT(*) as count FROM indicadores");
    
    if (existingCount[0].count > 0) {
      console.log(`‚ö†Ô∏è  Ya existen ${existingCount[0].count} indicadores en la base de datos.`);
      console.log('üîÑ Actualizando indicadores existentes...');
      
      // Actualizar estructura de tabla para incluir formula
      await pool.execute(`
        ALTER TABLE indicadores 
        ADD COLUMN IF NOT EXISTS formula TEXT NULL
      `);
      
      // Limpiar indicadores existentes
      await pool.execute("DELETE FROM indicadores");
      console.log('üóëÔ∏è  Indicadores anteriores eliminados');
    } else {
      // Asegurar que la tabla tenga la columna formula
      await pool.execute(`
        ALTER TABLE indicadores 
        ADD COLUMN IF NOT EXISTS formula TEXT NULL
      `);
    }

    // Insertar todos los indicadores
    for (const indicator of indicators) {
      await pool.execute(
        "INSERT INTO indicadores (nombre, descripcion, unidad, categoria, formula) VALUES (?, ?, ?, ?, ?)",
        [indicator.nombre, indicator.descripcion, indicator.unidad, indicator.categoria, indicator.formula]
      );
    }
    
    console.log('‚úÖ Todos los indicadores han sido cargados exitosamente');
    
    // Mostrar resumen por categor√≠as
    const [categories] = await pool.execute(`
      SELECT categoria, COUNT(*) as cantidad 
      FROM indicadores 
      GROUP BY categoria 
      ORDER BY categoria
    `);
    
    console.log('\nüìà Resumen de indicadores por categor√≠a:');
    categories.forEach(cat => {
      const emoji = {
        'Residuos': 'üåé',
        'Agua': 'üíß',
        'Energ√≠a': '‚ö°Ô∏è',
        'Aire y Emisiones': 'üí®',
        'Biodiversidad y Espacios Verdes': 'üå≥',
        'Gesti√≥n y Educaci√≥n Ambiental': 'üè¢'
      };
      console.log(`   ${emoji[cat.categoria] || 'üìä'} ${cat.categoria}: ${cat.cantidad} indicadores`);
    });
    
    const [totalCount] = await pool.execute("SELECT COUNT(*) as count FROM indicadores");
    console.log(`\nüéØ Total: ${totalCount[0].count} indicadores ambientales cargados`);
    
  } catch (error) {
    console.error('‚ùå Error al cargar indicadores:', error);
    throw error;
  }
}

// Ejecutar si el archivo se llama directamente
if (require.main === module) {
  loadEnvironmentalIndicators()
    .then(() => {
      console.log('üèÅ Proceso completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Error durante la carga:', error);
      process.exit(1);
    });
}

module.exports = { loadEnvironmentalIndicators };