const { pool } = require('../config/database');

async function smartIndicatorsLoader() {
  console.log('üß† Carga inteligente de indicadores ambientales...');
  
  try {
    // Verificar y adaptar estructura
    await verifyAndAdaptStructure();
    
    // Cargar datos
    await loadAllData();
    
    console.log('üéâ Indicadores cargados exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error al cargar indicadores:', error);
    throw error;
  }
}

async function verifyAndAdaptStructure() {
  console.log('üîç Verificando estructura de tablas...');
  
  // Verificar estructura de unidades
  const [unidadesColumns] = await pool.execute("DESCRIBE unidades");
  console.log('üìè Tabla unidades:');
  unidadesColumns.forEach(col => console.log(`   ${col.Field}: ${col.Type}`));
  
  // Verificar estructura de tipos_calculo
  const [tiposColumns] = await pool.execute("DESCRIBE tipos_calculo");
  console.log('üî¢ Tabla tipos_calculo:');
  tiposColumns.forEach(col => console.log(`   ${col.Field}: ${col.Type}`));
  
  // Adaptar estructura si es necesario
  const unidadesHasNombre = unidadesColumns.some(col => col.Field === 'nombre');
  const tiposHasDescripcion = tiposColumns.some(col => col.Field === 'descripcion');
  
  if (!unidadesHasNombre) {
    console.log('‚ö†Ô∏è  A√±adiendo columna nombre a tabla unidades...');
    await pool.execute("ALTER TABLE unidades ADD COLUMN nombre VARCHAR(100) NULL");
  }
  
  if (!tiposHasDescripcion) {
    console.log('‚ö†Ô∏è  A√±adiendo columna descripcion a tabla tipos_calculo...');
    await pool.execute("ALTER TABLE tipos_calculo ADD COLUMN descripcion TEXT NULL");
  }
  
  console.log('‚úÖ Estructura verificada/adaptada');
}

async function loadAllData() {
  // Cargar unidades
  await loadUnits();
  
  // Cargar tipos de c√°lculo
  await loadCalculationTypes();
  
  // Verificar categor√≠as
  await verifyCategories();
  
  // Cargar indicadores
  await loadIndicators();
}

async function loadUnits() {
  console.log('üìè Cargando unidades...');
  
  const units = [
    { simbolo: 'kg', nombre: 'Kilogramos' },
    { simbolo: 'kg/persona', nombre: 'Kilogramos por persona' },
    { simbolo: 'kg/m¬≤', nombre: 'Kilogramos por metro cuadrado' },
    { simbolo: '%', nombre: 'Porcentaje' },
    { simbolo: 'L', nombre: 'Litros' },
    { simbolo: 'L/persona', nombre: 'Litros por persona' },
    { simbolo: 'L/m¬≤', nombre: 'Litros por metro cuadrado' },
    { simbolo: 'kWh', nombre: 'Kilovatios-hora' },
    { simbolo: 'kWh/persona', nombre: 'Kilovatios-hora por persona' },
    { simbolo: 'kWh/m¬≤', nombre: 'Kilovatios-hora por metro cuadrado' },
    { simbolo: 'm¬≥', nombre: 'Metros c√∫bicos' },
    { simbolo: 'tCO‚ÇÇeq', nombre: 'Toneladas de CO‚ÇÇ equivalente' },
    { simbolo: 'kgCO‚ÇÇeq/persona', nombre: 'Kilogramos de CO‚ÇÇ equivalente por persona' },
    { simbolo: 'm¬≤', nombre: 'Metros cuadrados' },
    { simbolo: 'm¬≤/persona', nombre: 'Metros cuadrados por persona' },
    { simbolo: 'unidades', nombre: 'Unidades' },
    { simbolo: '$', nombre: 'D√≥lares' }
  ];
  
  for (const unit of units) {
    try {
      // Verificar si existe
      const [existing] = await pool.execute("SELECT id FROM unidades WHERE simbolo = ?", [unit.simbolo]);
      
      if (existing.length === 0) {
        // Determinar qu√© columnas usar basado en la estructura
        const [columns] = await pool.execute("DESCRIBE unidades");
        const hasNombre = columns.some(col => col.Field === 'nombre');
        
        if (hasNombre) {
          await pool.execute("INSERT INTO unidades (simbolo, nombre) VALUES (?, ?)", [unit.simbolo, unit.nombre]);
        } else {
          await pool.execute("INSERT INTO unidades (simbolo) VALUES (?)", [unit.simbolo]);
        }
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  Error con unidad ${unit.simbolo}:`, error.message);
    }
  }
  
  console.log('‚úÖ Unidades procesadas');
}

async function loadCalculationTypes() {
  console.log('üî¢ Cargando tipos de c√°lculo...');
  
  const types = [
    { nombre: 'directo', descripcion: 'Valor directo sin c√°lculo adicional' },
    { nombre: 'calculado', descripcion: 'Valor calculado mediante f√≥rmula' },
    { nombre: 'porcentaje', descripcion: 'Valor en porcentaje' },
    { nombre: 'ratio', descripcion: 'Relaci√≥n entre dos valores' }
  ];
  
  for (const type of types) {
    try {
      // Verificar si existe
      const [existing] = await pool.execute("SELECT id FROM tipos_calculo WHERE nombre = ?", [type.nombre]);
      
      if (existing.length === 0) {
        // Determinar qu√© columnas usar
        const [columns] = await pool.execute("DESCRIBE tipos_calculo");
        const hasDescripcion = columns.some(col => col.Field === 'descripcion');
        
        if (hasDescripcion) {
          await pool.execute("INSERT INTO tipos_calculo (nombre, descripcion) VALUES (?, ?)", [type.nombre, type.descripcion]);
        } else {
          await pool.execute("INSERT INTO tipos_calculo (nombre) VALUES (?)", [type.nombre]);
        }
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  Error con tipo ${type.nombre}:`, error.message);
    }
  }
  
  console.log('‚úÖ Tipos de c√°lculo procesados');
}

async function verifyCategories() {
  console.log('üè∑Ô∏è  Verificando categor√≠as...');
  
  const categories = [
    'Residuos',
    'Agua', 
    'Energ√≠a',
    'Aire y Emisiones',
    'Biodiversidad y Espacios Verdes',
    'Gesti√≥n y Educaci√≥n Ambiental'
  ];
  
  for (const category of categories) {
    await pool.execute("INSERT IGNORE INTO categorias (nombre) VALUES (?)", [category]);
  }
  
  console.log('‚úÖ Categor√≠as verificadas');
}

async function loadIndicators() {
  console.log('üìä Cargando indicadores ambientales...');
  
  const indicators = [
    // RESIDUOS
    { nombre: 'Generaci√≥n total de residuos', descripcion: 'Peso total de los residuos generados en un per√≠odo', categoria: 'Residuos', unidad: 'kg', tipo: 'directo', formula: null },
    { nombre: 'Generaci√≥n de residuos por persona', descripcion: 'Peso de los residuos generados por cada individuo (estudiante, docente o personal)', categoria: 'Residuos', unidad: 'kg/persona', tipo: 'calculado', formula: 'Generaci√≥n total de residuos / N√∫mero de personas' },
    { nombre: 'Generaci√≥n de residuos por metro cuadrado', descripcion: 'Peso de los residuos por el √°rea de la instituci√≥n', categoria: 'Residuos', unidad: 'kg/m¬≤', tipo: 'calculado', formula: 'Generaci√≥n total de residuos / √Årea total (m¬≤)' },
    { nombre: 'Porcentaje de reciclaje', descripcion: 'Proporci√≥n de residuos que se separan para reciclaje', categoria: 'Residuos', unidad: '%', tipo: 'porcentaje', formula: '(Residuos reciclados / Generaci√≥n total de residuos) √ó 100' },
    { nombre: 'Peso de residuos electr√≥nicos desechados', descripcion: 'Peso de computadoras, impresoras, monitores y otros equipos electr√≥nicos', categoria: 'Residuos', unidad: 'kg', tipo: 'directo', formula: null },
    { nombre: 'Porcentaje de compostaje de residuos org√°nicos', descripcion: 'Proporci√≥n de materia org√°nica (restos de alimentos, jardiner√≠a) que se desv√≠a a compostaje', categoria: 'Residuos', unidad: '%', tipo: 'porcentaje', formula: '(Residuos org√°nicos compostados / Total de residuos org√°nicos) √ó 100' },
    
    // AGUA
    { nombre: 'Consumo total de agua', descripcion: 'Volumen total de agua utilizada por la instituci√≥n', categoria: 'Agua', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'Consumo de agua por persona', descripcion: 'Volumen de agua que consume cada individuo', categoria: 'Agua', unidad: 'L/persona', tipo: 'calculado', formula: 'Consumo total de agua / N√∫mero de personas' },
    { nombre: 'Consumo de agua por metro cuadrado', descripcion: 'Volumen de agua por √°rea construida o del campus', categoria: 'Agua', unidad: 'L/m¬≤', tipo: 'calculado', formula: 'Consumo total de agua / √Årea total (m¬≤)' },
    { nombre: 'Volumen de agua de lluvia recolectada', descripcion: 'Cantidad de agua pluvial que se capta para su reutilizaci√≥n', categoria: 'Agua', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'Agua reutilizada o tratada', descripcion: 'Volumen de agua que se recicla para usos como riego o limpieza', categoria: 'Agua', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'N√∫mero de fugas de agua detectadas y reparadas', descripcion: 'Medida de la eficiencia del mantenimiento de la red de agua', categoria: 'Agua', unidad: 'unidades', tipo: 'directo', formula: null },
    
    // ENERG√çA
    { nombre: 'Consumo total de energ√≠a el√©ctrica', descripcion: 'Energ√≠a el√©ctrica total consumida', categoria: 'Energ√≠a', unidad: 'kWh', tipo: 'directo', formula: null },
    { nombre: 'Consumo de energ√≠a por persona', descripcion: 'Energ√≠a consumida por cada individuo', categoria: 'Energ√≠a', unidad: 'kWh/persona', tipo: 'calculado', formula: 'Consumo total de energ√≠a / N√∫mero de personas' },
    { nombre: 'Consumo de energ√≠a por metro cuadrado', descripcion: 'Energ√≠a consumida por la superficie total de la instituci√≥n', categoria: 'Energ√≠a', unidad: 'kWh/m¬≤', tipo: 'calculado', formula: 'Consumo total de energ√≠a / √Årea total (m¬≤)' },
    { nombre: 'Consumo de gas natural o GLP', descripcion: 'Volumen de gas utilizado para calefacci√≥n o cocinas', categoria: 'Energ√≠a', unidad: 'm¬≥', tipo: 'directo', formula: null },
    { nombre: 'Porcentaje de energ√≠a renovable', descripcion: 'Proporci√≥n de la energ√≠a que proviene de fuentes limpias (ej. paneles solares)', categoria: 'Energ√≠a', unidad: '%', tipo: 'porcentaje', formula: '(Energ√≠a renovable / Consumo total de energ√≠a) √ó 100' },
    { nombre: 'Ahorro de energ√≠a en periodos no lectivos', descripcion: 'Medida de la reducci√≥n del consumo durante vacaciones o fines de semana', categoria: 'Energ√≠a', unidad: '%', tipo: 'porcentaje', formula: '((Consumo periodo lectivo - Consumo periodo no lectivo) / Consumo periodo lectivo) √ó 100' },
    
    // AIRE Y EMISIONES
    { nombre: 'Emisiones de gases de efecto invernadero (GEI)', descripcion: 'Cantidad total de gases de efecto invernadero emitidos. Es la huella de carbono de la instituci√≥n', categoria: 'Aire y Emisiones', unidad: 'tCO‚ÇÇeq', tipo: 'directo', formula: null },
    { nombre: 'Emisiones de GEI por persona', descripcion: 'Huella de carbono per c√°pita de la comunidad educativa', categoria: 'Aire y Emisiones', unidad: 'kgCO‚ÇÇeq/persona', tipo: 'calculado', formula: 'Emisiones totales de GEI / N√∫mero de personas' },
    { nombre: 'Consumo de combustible por la flota de veh√≠culos', descripcion: 'Volumen de combustible (gasolina, di√©sel) utilizado por los veh√≠culos de la instituci√≥n (buses, camiones, etc.)', categoria: 'Aire y Emisiones', unidad: 'L', tipo: 'directo', formula: null },
    { nombre: 'N√∫mero de viajes en transporte sostenible', descripcion: 'Conteo de viajes realizados en autob√∫s, bicicleta o a pie, medido a trav√©s de encuestas', categoria: 'Aire y Emisiones', unidad: 'unidades', tipo: 'directo', formula: null },
    
    // BIODIVERSIDAD Y ESPACIOS VERDES
    { nombre: '√Årea de zonas verdes', descripcion: 'Superficie total de jardines, campos deportivos y √°reas naturales en el campus', categoria: 'Biodiversidad y Espacios Verdes', unidad: 'm¬≤', tipo: 'directo', formula: null },
    { nombre: '√Årea de zonas verdes por persona', descripcion: 'Espacio verde disponible para cada individuo', categoria: 'Biodiversidad y Espacios Verdes', unidad: 'm¬≤/persona', tipo: 'calculado', formula: '√Årea total de zonas verdes / N√∫mero de personas' },
    { nombre: 'N√∫mero de especies de flora nativa', descripcion: 'Conteo de las plantas end√©micas de la regi√≥n presentes en el campus', categoria: 'Biodiversidad y Espacios Verdes', unidad: 'unidades', tipo: 'directo', formula: null },
    
    // GESTI√ìN Y EDUCACI√ìN AMBIENTAL
    { nombre: 'Gasto en materiales sostenibles', descripcion: 'Inversi√≥n monetaria en productos con certificaciones ecol√≥gicas o de bajo impacto ambiental', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: '$', tipo: 'directo', formula: null },
    { nombre: 'N√∫mero de iniciativas ambientales', descripcion: 'Conteo de proyectos, programas o campa√±as de sostenibilidad organizadas', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: 'unidades', tipo: 'directo', formula: null },
    { nombre: 'Porcentaje de estudiantes/personal que han recibido formaci√≥n ambiental', descripcion: 'Proporci√≥n de la comunidad que ha participado en talleres o cursos sobre sostenibilidad', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: '%', tipo: 'porcentaje', formula: '(Personas con formaci√≥n ambiental / Total de personas) √ó 100' },
    { nombre: 'N√∫mero de asignaturas con enfoque ambiental', descripcion: 'Conteo de los cursos o materias en el plan de estudios que abordan la sostenibilidad', categoria: 'Gesti√≥n y Educaci√≥n Ambiental', unidad: 'unidades', tipo: 'directo', formula: null }
  ];
  
  // Limpiar indicadores existentes
  await pool.execute("DELETE FROM indicadores");
  console.log('üóëÔ∏è  Indicadores anteriores eliminados');
  
  let insertedCount = 0;
  
  for (const indicator of indicators) {
    try {
      const [categoria] = await pool.execute("SELECT id FROM categorias WHERE nombre = ?", [indicator.categoria]);
      const [unidad] = await pool.execute("SELECT id FROM unidades WHERE simbolo = ?", [indicator.unidad]);
      const [tipo] = await pool.execute("SELECT id FROM tipos_calculo WHERE nombre = ?", [indicator.tipo]);
      
      if (categoria.length > 0 && unidad.length > 0 && tipo.length > 0) {
        await pool.execute(
          "INSERT INTO indicadores (nombre, descripcion, categoria_id, unidad_id, tipo_calculo_id, formula) VALUES (?, ?, ?, ?, ?, ?)",
          [indicator.nombre, indicator.descripcion, categoria[0].id, unidad[0].id, tipo[0].id, indicator.formula]
        );
        insertedCount++;
      } else {
        console.log(`‚ö†Ô∏è  No se pudo insertar: ${indicator.nombre}`);
        if (categoria.length === 0) console.log(`   - Categor√≠a '${indicator.categoria}' no encontrada`);
        if (unidad.length === 0) console.log(`   - Unidad '${indicator.unidad}' no encontrada`);
        if (tipo.length === 0) console.log(`   - Tipo '${indicator.tipo}' no encontrado`);
      }
    } catch (error) {
      console.log(`‚ùå Error insertando ${indicator.nombre}:`, error.message);
    }
  }
  
  console.log(`‚úÖ ${insertedCount} indicadores cargados exitosamente`);
  
  // Mostrar resumen
  await showSummary();
}

async function showSummary() {
  const [categories] = await pool.execute(`
    SELECT c.nombre, COUNT(i.id) as cantidad 
    FROM categorias c
    LEFT JOIN indicadores i ON c.id = i.categoria_id
    GROUP BY c.id, c.nombre
    ORDER BY c.nombre
  `);
  
  console.log('\nüìà Resumen de indicadores por categor√≠a:');
  const categoryEmojis = {
    'Residuos': 'üåé',
    'Agua': 'üíß',
    'Energ√≠a': '‚ö°Ô∏è',
    'Aire y Emisiones': 'üí®',
    'Biodiversidad y Espacios Verdes': 'üå≥',
    'Gesti√≥n y Educaci√≥n Ambiental': 'üè¢'
  };
  
  let total = 0;
  categories.forEach(cat => {
    const emoji = categoryEmojis[cat.nombre] || 'üìä';
    console.log(`   ${emoji} ${cat.nombre}: ${cat.cantidad} indicadores`);
    total += cat.cantidad;
  });
  
  console.log(`\nüéØ Total: ${total} indicadores ambientales`);
}

// Ejecutar si el archivo se llama directamente
if (require.main === module) {
  smartIndicatorsLoader()
    .then(() => {
      console.log('üèÅ Proceso completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Error durante la carga:', error);
      process.exit(1);
    });
}

module.exports = { smartIndicatorsLoader };